const { Pool } = require('pg');

class DatabaseService {
  constructor() {
    // Configuração PostgreSQL do Coolify
    this.pool = new Pool({
      connectionString: process.env.DATABASE_URL || 'postgres://postgres:lYPS50GDgjiA6QEL0REU142DUG0qHefqqGcGo8I2njYiBkpxlSuuhMv8Lpv1K2VY@91.107.237.159:5432/postgres',
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    this.initDatabase();
  }

  async initDatabase() {
    try {
      await this.createTables();
      await this.insertSampleData();
      console.log('PostgreSQL database initialized successfully');
    } catch (error) {
      console.error('Error initializing PostgreSQL database:', error);
    }
  }

  async createTables() {
    const client = await this.pool.connect();
    
    try {
      // Tabela de usuários (usando estrutura existente)
      await client.query(`
        CREATE TABLE IF NOT EXISTS users (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          email VARCHAR(255) UNIQUE NOT NULL,
          password_hash VARCHAR(255) NOT NULL,
          full_name VARCHAR(255),
          company VARCHAR(255),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);

      // Tabela de clientes
      await client.query(`
        CREATE TABLE IF NOT EXISTS clients (
          id TEXT PRIMARY KEY,
          company TEXT NOT NULL,
          contact_person TEXT,
          email TEXT,
          phone TEXT,
          address TEXT,
          city TEXT,
          postal_code TEXT,
          country TEXT DEFAULT 'Suisse',
          category TEXT DEFAULT 'facture',
          user_id TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id)
        )
      `);

      // Tabela de faturas
      await client.query(`
        CREATE TABLE IF NOT EXISTS factures (
          id TEXT PRIMARY KEY,
          numero_facture TEXT UNIQUE NOT NULL,
          client_id TEXT NOT NULL,
          client_name TEXT NOT NULL,
          date TEXT NOT NULL,
          echeance TEXT NOT NULL,
          articles TEXT NOT NULL,
          subtotal DECIMAL(10,2) NOT NULL,
          tva DECIMAL(10,2) NOT NULL,
          total DECIMAL(10,2) NOT NULL,
          status TEXT DEFAULT 'pending',
          user_id TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (client_id) REFERENCES clients (id),
          FOREIGN KEY (user_id) REFERENCES users (id)
        )
      `);

      // Tabela de serviços
      await client.query(`
        CREATE TABLE IF NOT EXISTS services (
          id TEXT PRIMARY KEY,
          name TEXT NOT NULL,
          description TEXT,
          price DECIMAL(10,2) NOT NULL,
          category TEXT DEFAULT 'service',
          user_id TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id)
        )
      `);

      console.log('Tables created successfully');
    } finally {
      client.release();
    }
  }

  async insertSampleData() {
    const client = await this.pool.connect();
    
    try {
      // Verificar se usuário já existe
      const userCheck = await client.query('SELECT id FROM users WHERE email = $1', ['admin@finances.ch']);
      
      if (userCheck.rows.length === 0) {
        const userId = 'user_' + Date.now();
        const bcrypt = require('bcrypt');
        
        // Hash da senha padrão
        const hash = await bcrypt.hash('admin123', 10);

        await client.query(`
          INSERT INTO users (id, email, full_name, company_name, role, password_hash)
          VALUES ($1, $2, $3, $4, $5, $6)
        `, [userId, 'admin@finances.ch', 'Admin Finances', 'Finances Pro Suisse', 'admin', hash]);
        
        // Inserir clientes de exemplo
        const clients = [
          {
            company: 'TechnoServ SA',
            contact_person: 'Jean Dupont',
            email: 'contact@technoserv.ch',
            phone: '+41 22 123 45 67',
            address: 'Rue de la Corraterie 15',
            city: 'Genève',
            postal_code: '1204',
            category: 'facture'
          },
          {
            company: 'Alpine Consulting',
            contact_person: 'Marie Martin',
            email: 'info@alpine-consulting.ch',
            phone: '+41 21 987 65 43',
            address: 'Avenue de la Gare 25',
            city: 'Lausanne',
            postal_code: '1003',
            category: 'facture'
          }
        ];

        for (const client of clients) {
          const clientId = 'client_' + Date.now() + Math.random().toString(36).substr(2, 5);
          await client.query(`
            INSERT INTO clients (id, company, contact_person, email, phone, address, city, postal_code, category, user_id)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
          `, [clientId, client.company, client.contact_person, client.email, client.phone,
              client.address, client.city, client.postal_code, client.category, userId]);
        }

        // Inserir serviços de exemplo
        const services = [
          {
            name: 'Consultoria Financeira',
            description: 'Serviços de consultoria em gestão financeira',
            price: 150.00,
            category: 'consultoria'
          },
          {
            name: 'Auditoria Contábil',
            description: 'Auditoria e revisão de contas',
            price: 200.00,
            category: 'auditoria'
          }
        ];

        for (const service of services) {
          const serviceId = 'service_' + Date.now() + Math.random().toString(36).substr(2, 5);
          await client.query(`
            INSERT INTO services (id, name, description, price, category, user_id)
            VALUES ($1, $2, $3, $4, $5, $6)
          `, [serviceId, service.name, service.description, service.price, service.category, userId]);
        }

        console.log('Sample data inserted successfully');
      }
    } finally {
      client.release();
    }
  }

  // Métodos de utilidade
  async query(text, params = []) {
    const client = await this.pool.connect();
    try {
      const result = await client.query(text, params);
      return result;
    } finally {
      client.release();
    }
  }

  async get(text, params = []) {
    const result = await this.query(text, params);
    return result.rows[0] || null;
  }

  async all(text, params = []) {
    const result = await this.query(text, params);
    return result.rows;
  }

  async run(text, params = []) {
    const result = await this.query(text, params);
    return result.rows[0] || null;
  }

  async close() {
    await this.pool.end();
  }
}

// Instância singleton
const dbService = new DatabaseService();
module.exports = dbService;